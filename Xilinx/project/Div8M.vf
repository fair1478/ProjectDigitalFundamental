////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Div8M.vf
// /___/   /\     Timestamp : 12/11/2022 14:53:51
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/Xilinx/project/Div8M.vf -w C:/Xilinx/project/Div8M.sch
//Design Name: Div8M
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module FTC_HXILINX_Div8M(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_Div8M(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Div8_MUSER_Div8M(CLKIN, 
                        CLK_OUT);

    input CLKIN;
   output CLK_OUT;
   
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_12;
   wire XLXN_13;
   
   (* HU_SET = "XLXI_3_24" *) 
   FTC_HXILINX_Div8M  XLXI_3 (.C(CLKIN), 
                             .CLR(XLXN_12), 
                             .T(XLXN_13), 
                             .Q(XLXN_7));
   (* HU_SET = "XLXI_4_25" *) 
   FTC_HXILINX_Div8M  XLXI_4 (.C(CLKIN), 
                             .CLR(XLXN_12), 
                             .T(XLXN_7), 
                             .Q(XLXN_6));
   (* HU_SET = "XLXI_5_26" *) 
   FTC_HXILINX_Div8M  XLXI_5 (.C(CLKIN), 
                             .CLR(XLXN_12), 
                             .T(XLXN_3), 
                             .Q(XLXN_4));
   AND2  XLXI_6 (.I0(XLXN_6), 
                .I1(XLXN_7), 
                .O(XLXN_3));
   AND3  XLXI_7 (.I0(XLXN_4), 
                .I1(XLXN_6), 
                .I2(XLXN_7), 
                .O(CLK_OUT));
   VCC  XLXI_8 (.P(XLXN_13));
   GND  XLXI_9 (.G(XLXN_12));
endmodule
`timescale 1ns / 1ps

module Div8M(CLR, 
             Input_CLK, 
             Out_CLK);

    input CLR;
    input Input_CLK;
   output Out_CLK;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_17;
   
   (* HU_SET = "XLXI_1_27" *) 
   CD4CE_HXILINX_Div8M  XLXI_1 (.C(Input_CLK), 
                               .CE(XLXN_10), 
                               .CLR(CLR), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_2));
   (* HU_SET = "XLXI_2_28" *) 
   CD4CE_HXILINX_Div8M  XLXI_2 (.C(XLXN_2), 
                               .CE(XLXN_11), 
                               .CLR(CLR), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_3));
   (* HU_SET = "XLXI_3_29" *) 
   CD4CE_HXILINX_Div8M  XLXI_3 (.C(XLXN_3), 
                               .CE(XLXN_12), 
                               .CLR(CLR), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_4));
   (* HU_SET = "XLXI_4_30" *) 
   CD4CE_HXILINX_Div8M  XLXI_4 (.C(XLXN_4), 
                               .CE(XLXN_13), 
                               .CLR(CLR), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_5));
   (* HU_SET = "XLXI_5_31" *) 
   CD4CE_HXILINX_Div8M  XLXI_5 (.C(XLXN_5), 
                               .CE(XLXN_14), 
                               .CLR(CLR), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_6));
   (* HU_SET = "XLXI_7_32" *) 
   CD4CE_HXILINX_Div8M  XLXI_7 (.C(XLXN_6), 
                               .CE(XLXN_17), 
                               .CLR(CLR), 
                               .CEO(), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC(XLXN_7));
   VCC  XLXI_8 (.P(XLXN_10));
   VCC  XLXI_9 (.P(XLXN_11));
   VCC  XLXI_10 (.P(XLXN_12));
   VCC  XLXI_11 (.P(XLXN_13));
   VCC  XLXI_12 (.P(XLXN_14));
   VCC  XLXI_13 (.P(XLXN_17));
   Div8_MUSER_Div8M  XLXI_17 (.CLKIN(XLXN_7), 
                             .CLK_OUT(Out_CLK));
endmodule
