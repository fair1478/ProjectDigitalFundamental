////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : counter128.vf
// /___/   /\     Timestamp : 12/13/2022 12:56:57
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/Xilinx/project/counter128.vf -w C:/Xilinx/project/counter128.sch
//Design Name: counter128
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module FTC_HXILINX_counter128(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale  100 ps / 10 ps

module AND6_HXILINX_counter128 (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = I0 && I1 && I2 && I3 && I4 && I5;

endmodule
`timescale  100 ps / 10 ps

module AND7_HXILINX_counter128 (O, I0, I1, I2, I3, I4, I5, I6);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;
   input I6;

assign O = I0 && I1 && I2 && I3 && I4 && I5 && I6;

endmodule
`timescale 1ns / 1ps

module counter128(CE, 
                  CLK, 
                  CLR, 
                  count, 
                  TC_out);

    input CE;
    input CLK;
    input CLR;
   output [6:0] count;
   output TC_out;
   
   wire XLXN_7;
   wire XLXN_14;
   wire XLXN_18;
   wire XLXN_23;
   wire XLXN_28;
   wire XLXN_34;
   wire XLXN_42;
   wire [6:0] count_DUMMY;
   
   assign count[6:0] = count_DUMMY[6:0];
   (* HU_SET = "XLXI_8_32" *) 
   FTC_HXILINX_counter128  XLXI_8 (.C(XLXN_14), 
                                  .CLR(CLR), 
                                  .T(XLXN_7), 
                                  .Q(count_DUMMY[0]));
   (* HU_SET = "XLXI_9_33" *) 
   FTC_HXILINX_counter128  XLXI_9 (.C(XLXN_14), 
                                  .CLR(CLR), 
                                  .T(count_DUMMY[0]), 
                                  .Q(count_DUMMY[1]));
   (* HU_SET = "XLXI_10_34" *) 
   FTC_HXILINX_counter128  XLXI_10 (.C(XLXN_14), 
                                   .CLR(CLR), 
                                   .T(XLXN_18), 
                                   .Q(count_DUMMY[2]));
   (* HU_SET = "XLXI_11_35" *) 
   FTC_HXILINX_counter128  XLXI_11 (.C(XLXN_14), 
                                   .CLR(CLR), 
                                   .T(XLXN_23), 
                                   .Q(count_DUMMY[3]));
   (* HU_SET = "XLXI_12_36" *) 
   FTC_HXILINX_counter128  XLXI_12 (.C(XLXN_14), 
                                   .CLR(CLR), 
                                   .T(XLXN_28), 
                                   .Q(count_DUMMY[4]));
   (* HU_SET = "XLXI_13_37" *) 
   FTC_HXILINX_counter128  XLXI_13 (.C(XLXN_14), 
                                   .CLR(CLR), 
                                   .T(XLXN_34), 
                                   .Q(count_DUMMY[5]));
   (* HU_SET = "XLXI_14_38" *) 
   FTC_HXILINX_counter128  XLXI_14 (.C(XLXN_14), 
                                   .CLR(CLR), 
                                   .T(XLXN_42), 
                                   .Q(count_DUMMY[6]));
   VCC  XLXI_15 (.P(XLXN_7));
   AND2  XLXI_16 (.I0(count_DUMMY[1]), 
                 .I1(count_DUMMY[0]), 
                 .O(XLXN_18));
   AND3  XLXI_17 (.I0(count_DUMMY[2]), 
                 .I1(count_DUMMY[1]), 
                 .I2(count_DUMMY[0]), 
                 .O(XLXN_23));
   AND4  XLXI_18 (.I0(count_DUMMY[3]), 
                 .I1(count_DUMMY[2]), 
                 .I2(count_DUMMY[1]), 
                 .I3(count_DUMMY[0]), 
                 .O(XLXN_28));
   AND5  XLXI_19 (.I0(count_DUMMY[4]), 
                 .I1(count_DUMMY[3]), 
                 .I2(count_DUMMY[2]), 
                 .I3(count_DUMMY[1]), 
                 .I4(count_DUMMY[0]), 
                 .O(XLXN_34));
   (* HU_SET = "XLXI_20_39" *) 
   AND6_HXILINX_counter128  XLXI_20 (.I0(count_DUMMY[5]), 
                                    .I1(count_DUMMY[4]), 
                                    .I2(count_DUMMY[3]), 
                                    .I3(count_DUMMY[2]), 
                                    .I4(count_DUMMY[1]), 
                                    .I5(count_DUMMY[0]), 
                                    .O(XLXN_42));
   AND2  XLXI_21 (.I0(CLK), 
                 .I1(CE), 
                 .O(XLXN_14));
   (* HU_SET = "XLXI_22_40" *) 
   AND7_HXILINX_counter128  XLXI_22 (.I0(count_DUMMY[6]), 
                                    .I1(count_DUMMY[5]), 
                                    .I2(count_DUMMY[4]), 
                                    .I3(count_DUMMY[3]), 
                                    .I4(count_DUMMY[2]), 
                                    .I5(count_DUMMY[1]), 
                                    .I6(count_DUMMY[0]), 
                                    .O(TC_out));
endmodule
